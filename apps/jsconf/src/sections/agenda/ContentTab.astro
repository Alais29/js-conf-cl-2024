---
import { RadiusGradientFrame } from '@components';
import { type agendaData } from '@sections';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';

dayjs.extend(utc);

type Props = {
  agendaData: agendaData[];
};

const { agendaData } = Astro.props;
---

{
  agendaData.map(
    ({ time_start: timeStart, time_end: timeEnd, speaker_name: speakerName, description }) => (
      <section>
        <RadiusGradientFrame class="card-demo">
          <div class="time-info">
            <time>
              {dayjs.utc(timeStart).format('HH:mm')} - {dayjs.utc(timeEnd).format('HH:mm')}
            </time>
            <span>EN VIVO</span>
          </div>
          <div>
            <p class="speaker">Speaker</p>
            <h3>{speakerName}</h3>
          </div>
          <p>{description}</p>
        </RadiusGradientFrame>
      </section>
    )
  )
}

<style>
  section {
    --card-demo-px: 1.5rem;
    --offset: 1.45;
    --negative-offset: calc(var(--offset) * -1);

    position: relative;
    max-width: calc(100% - var(--card-demo-px));
    margin-left: auto;

    @media (width >= 1200px) {
      --offset: 1.66;

      max-width: 596px;
      margin-left: unset;

      &:nth-child(odd) {
        align-self: end;
      }

      &:nth-child(even) {
        align-self: start;
      }
    }

    &::after {
      --size: 1.5rem;

      content: '';
      position: absolute;
      width: var(--size);
      height: var(--size);
      background: var(--gray-2);
      border-radius: 50%;
      left: 0;
      top: 0;
      translate: calc(var(--card-demo-px) * var(--negative-offset)) 0;
    }

    &:has(.is-online)::after {
      background: var(--yellow);
    }

    @media (width >= 1200px) {
      &::after {
        top: 50%;
      }

      &:nth-child(odd)::after {
        translate: calc(var(--card-demo-px) * var(--negative-offset)) -50%;
      }

      &:nth-child(even)::after {
        right: 0;
        left: unset;
        translate: calc(var(--card-demo-px) * var(--offset)) -50%;
      }
    }
    .card-demo {
      --border-color: linear-gradient(180deg, #2a2401 0%, #9a8025 39.57%, #ede060 100%);
      --border-width: 2px;
      --shadow: 0px 4px 85.3px rgba(85, 85, 46, 0.1);
      --radius: 20px;

      display: flex;
      flex-direction: column;
      gap: 0.35rem;
      box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
      padding: 1rem var(--card-demo-px);
      font-family: Barlow;
      text-align: left;
      filter: grayscale(1);
      opacity: 0.5;

      background: linear-gradient(0.07deg, rgba(80, 72, 29, 0.2) 0.03%, rgba(0, 0, 0, 0) 95.96%),
        radial-gradient(
          95.25% 166.54% at 98.39% 2.85%,
          rgba(54, 53, 38, 0.62) 8%,
          rgba(9, 9, 7, 0) 80%
        );

      &.is-online {
        filter: grayscale(0);
        opacity: 1;

        .time-info {
          span {
            opacity: 1;
          }
        }
      }

      @media (width <= 800px) {
        --shadow: 0px 4px 85.3px rgba(64, 64, 64, 0.1);
        --radius: 10px;
        --border-color: linear-gradient(327.26deg, #ffffff 31.78%, #272727 63.2%, #656565 93.99%);

        background: radial-gradient(
            95.25% 166.54% at 98.39% 2.85%,
            #272727 8%,
            rgba(9, 9, 7, 0) 80%
          ),
          linear-gradient(0.07deg, rgba(64, 64, 64, 0.2) 0.03%, rgba(255, 255, 255, 0) 95.96%);
      }

      .time-info {
        display: flex;
        align-items: center;
        justify-content: space-between;

        time {
          font-size: 0.875rem;
          font-weight: 600;
        }

        span {
          opacity: 0;
          background: var(--yellow);
          color: var(--black);
          font-size: 0.875rem;
          font-weight: 600;
          padding: 2px 6px;
          border-radius: 1000px;
        }
      }

      .speaker {
        color: var(--yellow);
        font-size: 1.5rem;
        font-weight: 700;
      }

      h3 {
        font-size: 1.125rem;
        font-weight: 700;
      }
    }
  }
</style>

<script>
  import dayjs from 'dayjs';
  import timezone from 'dayjs/plugin/timezone';
  import utc from 'dayjs/plugin/utc';
  import agenda from '@data/agenda/agenda';

  dayjs.extend(utc);
  dayjs.extend(timezone);

  // Configurar la zona horaria por defecto a 'America/Santiago'
  const setTimezone = 'America/Santiago';

  dayjs.tz.setDefault(setTimezone);

  // El elemento al que le añadimos o quitamos la clase
  const cardsDemos = document.querySelectorAll('.card-demo');

  // Función para verificar cuándo iniciar y cuándo finalizar
  function checkTime() {
    const currentTime = dayjs.utc(); // Obtener el tiempo actual en UTC
    const currentMoment = currentTime.tz(setTimezone).format('HH:mm:ss'); // Convertir a hora local de Chile

    agenda.forEach((event, index) => {
      const { time_start: timeStart, time_end: timeEnd } = event;

      // Crear fechas con Day.js en UTC y luego convertir a la zona horaria de Chile
      const startTimestamp = dayjs.utc(timeStart).tz(setTimezone);
      const endTimestamp = dayjs.utc(timeEnd).tz(setTimezone);

      // Extraer la hora, el minuto y el segundo de la fecha
      const startMoment = startTimestamp.format('HH:mm:ss');
      const endMoment = endTimestamp.format('HH:mm:ss');

      // Verifica si estamos en el rango de tiempo del estado 'online'
      if (currentMoment >= startMoment && currentMoment <= endMoment) {
        // Añade la clase 'is-online' al card correspondiente (index) si está en rango
        if (cardsDemos[index] && !cardsDemos[index].classList.contains('is-online')) {
          cardsDemos[index].classList.add('is-online');
        }
      } else if (currentMoment > endMoment) {
        // Quita la clase 'is-online' si el tiempo del evento ya pasó
        if (cardsDemos[index] && cardsDemos[index].classList.contains('is-online')) {
          cardsDemos[index].classList.remove('is-online');
        }
      }
    });
  }

  // Verificación cada 30 segundos
  const interval = 30 * 1000;
  setInterval(checkTime, interval);
</script>
